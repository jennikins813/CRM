{\rtf1\ansi\ansicpg1252\cocoartf1265\cocoasubrtf190
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww14180\viewh12440\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\b\fs24 \cf0 contact.rb\

\b0 class Contact\
	@@customer = 1000		#implement the IDnumber\
\
	attr_accessor :name, :id, :notes \
\
	def initialize\
		@id = Contact.get_id\
	end\
\
	def to_s 	#to_s overrides\
		"ID: #\{@id\}\\nName: #\{@name\}\\nNotes: #\{@notes\}"\
	end 		#\\n (new line character) creates a new line\
\
	def self.get_id   #self: way to create a class method\
		@@customer += 1 	 #customer id will increment 1000 by 1\
		@@customer\
	end\
end\
\
\
#self = denotes a class method, not an instance method.\
#class method: method you can only call on a class\
#instance method: methods called on an instance of a class.\
\
\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\

\b rolodex.rb\

\b0 	class Rolodex\
	def initialize\
		@contacts = []		#empty array to accept new contacts\
		@id = 1000\
	end\
\
	def create_contact(name)	#adding a contact\
		contact = Contact.new	#do Contact.new to create a new object (contact)\
		contact.name = name\
		@contacts << contact 	#pushes the new contact into the array\
	end\
\
	def display_contacts		#display all contacts\
		@contacts.each do |contact|\
			puts contact\
		end\
	end\
\
	def remove_contact(id)		#delete a contact\
		@contacts.delete_if \{|c| c.id == id\}\
	end\
\
	def edit_contact(id)		#modifying contact\
		puts "Enter new contact info:"\
		edit_contact = gets.chomp\
		@contacts.each do |contact|\
			contact.name = new name if contact.id == id\
		end\
	end\
end\
\
#\
#    def remove_contact(id)       #nn intro a concept of an ID/id\
#         result = nil\
#         @contacts.each do |contact|\
#              if contact.id == id\
#                  result = contact\
#              end\
#         end\
#         @contacts.delete(result) if result != nil\
#    end\
\
\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\

\b runner.rb\

\b0 require './rolodex'		#references the rolodex.rb file\
require './contact'		#references the contact.rb file\
\
class Runner  				 # this is the customer/user interface\
	def initialize		    #need rolodex to go thru user database\
		@rolodex = Rolodex.new		#initialize to create a rolodex\
	end\
\
	def main_menu\
		puts "<< CRM Main Menu - Select an option below: >>"\
		puts "[1] Add a contact"\
		puts "[2] Display all contacts"\
		puts "[3] Remove a contact"\
		puts "[4] Edit a contact"\
		puts "[5] Show a contact"\
		puts "[0] To Exit"\
	end\
\
	def add_contact\
		puts "Enter Customer's Name"	# step 1 in main menu\
		puts "(First Name, Last Name)"\
		name = gets.chomp\
		@rolodex.create_contact(name)   #nn def create_contact in \
	end 									#class Rolodex\
\
	def display_contacts\
		puts "All Contacts:"			# step 2 in the main menu\
		@rolodex.display_contacts	#nn def in class Rolodex n Contacts\
		puts "----------"			#just to show a break\
	end\
\
	def remove_contact\
		puts "Enter contact's ID to remove it:"\
		id = gets.chomp.to_i\
		@rolodex.remove_contact(id)\
	end\
\
	def edit_contact\
		puts "Enter contact's ID to edit it:"\
		id = gets.chomp.to_i\
		@rolodex.edit_contact(id)\
	end\
\
	def run  # makes the code run in the cmd line\
		done = false\
		while !done			#while to loop\
		  main_menu\
		  input = gets.chomp.to_i\
		  if input == 0		#exit option on main menu\
		  	done = true\
		  elsif input == 1  #Add a contact (add_contact) on main menu\
		  	add_contact\
		  elsif input == 2	\
		  	display_contacts\
		  elsif input == 3\
		  	remove_contact\
		  elsif input == 4\
		  	edit_contact\
		  else input == 5\
		  	show_contact\
		  end\
		end\
	end\
end\
\
#call the methods inside the classes, like this:\
runner = Runner.new\
runner.run 		#calls the run method}